name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

permissions:
  contents: read
  packages: write
  security-events: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: foursale

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: app/backend/package-lock.json
      
      - name: Install dependencies
        run: |
          cd app/backend
          npm ci
      
      - name: Run tests
        run: |
          cd app/backend
          npm test

  security-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  build:
    needs: [test, security-scan]
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
      
      - name: Build and push backend
        uses: docker/build-push-action@v5
        with:
          context: ./app/backend
          push: true
          tags: ${{ env.REGISTRY }}/${{ github.repository_owner }}/foursale-backend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Build and push frontend
        uses: docker/build-push-action@v5
        with:
          context: ./app/frontend
          push: true
          tags: ${{ env.REGISTRY }}/${{ github.repository_owner }}/foursale-frontend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-dev:
    if: github.ref == 'refs/heads/develop'
    needs: build
    runs-on: ubuntu-latest
    environment: development
    steps:
      - uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2
      
      - name: Update kubeconfig
        run: aws eks update-kubeconfig --region us-west-2 --name foursale-dev
      
      - name: Deploy security
        run: |
          chmod +x security/install.sh
          ./security/install.sh
      
      - name: Deploy monitoring
        run: |
          chmod +x monitoring/install.sh
          ./monitoring/install.sh
      
      - name: Deploy to dev
        run: |
          helm upgrade --install foursale-dev k8s/helm/foursale-chart/ \
            --namespace foursale \
            --create-namespace \
            --set image.backend.tag=${{ github.sha }} \
            --set image.frontend.tag=${{ github.sha }} \
            --set ingress.hosts[0].host=dev.foursale.com \
            --wait

  deploy-prod:
    if: github.ref == 'refs/heads/main'
    needs: build
    runs-on: ubuntu-latest
    environment: production
    steps:
      - uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      
      - name: Check if cluster exists
        id: cluster-check
        run: |
          if aws eks describe-cluster --region us-east-1 --name foursale-prod >/dev/null 2>&1; then
            echo "cluster-exists=true" >> $GITHUB_OUTPUT
          else
            echo "cluster-exists=false" >> $GITHUB_OUTPUT
            echo "⚠️ EKS cluster 'foursale-prod' not found. Deploy infrastructure first."
          fi
      
      - name: Update kubeconfig
        if: steps.cluster-check.outputs.cluster-exists == 'true'
        run: aws eks update-kubeconfig --region us-east-1 --name foursale-prod
      
      - name: Deploy security
        if: steps.cluster-check.outputs.cluster-exists == 'true'
        run: |
          chmod +x security/install.sh
          ./security/install.sh
      
      - name: Deploy monitoring
        if: steps.cluster-check.outputs.cluster-exists == 'true'
        run: |
          chmod +x monitoring/install.sh
          ./monitoring/install.sh
      
      - name: Deploy to prod
        if: steps.cluster-check.outputs.cluster-exists == 'true'
        run: |
          helm upgrade --install foursale-prod k8s/helm/foursale-chart/ \
            --namespace foursale \
            --create-namespace \
            --set image.backend.tag=${{ github.sha }} \
            --set image.frontend.tag=${{ github.sha }} \
            --set ingress.hosts[0].host=foursale.com \
            --set replicaCount=3 \
            --wait